
#include "ApplicationMain.h"
#include "ModeSelect.h"

#include "UIServer.h"
#include "UIDisplay.h"
#include "UISlide.h"
#include "UIGetSlide.h"

bool ModeSelect::Initialize() {
	if (!base::Initialize()) { return false; }

	_ui = new UIServer();
	_ui->Initialize();

	Load();
	
	_ui->Search("stage1")->_selectNum = 0;
	_ui->Search("stage2")->_selectNum = 1;
	_ui->Search("stage3")->_selectNum = 2;
	_ui->Search("toTitle")->_selectNum = 3;

	_select = _ui->Search("stage1")->_selectNum;

	_maxOptions = STAGE_SELECT_NUM;

	return true;
}

bool ModeSelect::Terminate() {
	base::Terminate();
	_ui->Terminate();
	delete _ui;
	return true;
}

bool ModeSelect::Process() {
	base::Process();

	int trg = ApplicationMain::GetInstance()->GetPad()->GetTrgButton();

	_ui->Process();

	// 上下でカーソルを移動する
	if (trg & INPUT_DPAD_UP) { _select--; }
	if (trg & INPUT_DPAD_DOWN) { _select++; }

	// 選択位置を上下ループ
	_select = (_select + _maxOptions) % _maxOptions;


	// 選択処理
	for (const auto& ui : _ui->_vUI) {
		if (ui == _ui->Search("Get")) { continue; }			// 
		if (ui->_selectNum == _select) {					// ui側に割り振られた番号と_selectの数字が同じか否か
			std::string name = ui->_uiName;					// 選択している項目の名前
			SwitchTagWithBg(name);
			AdjustItemPos(name);
			_ui->SelectPosAdjustment(name, "Get", 0, -5);	// 選択中の項目にカーソルを重ねる	
			if (trg & INPUT_A) {
				ui->Selected();
			}
			break;
		}
	}


	return true;
}

bool ModeSelect::Render() {
	base::Render();

	float oldW = 0, oldY = 0, oldH = 0;
	std::string selectName;
	for (const auto& ui : _ui->_vUI) {
		if (ui == _ui->Search("Get")) { continue; }
		if (ui->_selectNum == _select) {
			selectName = ui->_uiName;
			oldW = ui->_w;
			oldY = ui->_y;
			oldH = ui->_h;
			ui->_w += 51;
			ui->_y -= 5;
			ui->_h += 10;
			break;
		}
	}

	_ui->Render();

	// ループ外で選択されたUI要素を取得
	auto selectUI = _ui->Search(selectName);
	
	// 元の値に戻す
	selectUI->_w = oldW;
	selectUI->_y = oldY;
	selectUI->_h = oldH;

	int Y = _ui->Search("Get")->_y;
	DrawFormatString(0, 0, GetColor(255, 0, 0),"%d\n %d", Y,_select);

	return true;
}

void ModeSelect::Load() {
	// 背景
	int cgBgStage1, cgBgStage2, cgBgStage3;
	cgBgStage1 = res::LoadGraph("res/UI/StageSelect/ui_stagebg_01.png");
	cgBgStage2 = res::LoadGraph("res/UI/StageSelect/ui_stagebg_02.png");
	cgBgStage3 = res::LoadGraph("res/UI/StageSelect/ui_stagebg_03.png");
	_ui->Add(new UIDisplay(), nullptr, cgBgStage1, 0, 0, 1920, 1080, 1, "bgStage1");
	_ui->Add(new UIDisplay(), nullptr, cgBgStage2, 0, 0, 1920, 1080, 1, "bgStage2");
	_ui->Add(new UIDisplay(), nullptr, cgBgStage3, 0, 0, 1920, 1080, 1, "bgStage3");

	// フレーム
	int cgLeftFrame, cgRightFrame;
	cgLeftFrame = res::LoadGraph("res/UI/StageSelect/ui_stageframe_01.png");
	cgRightFrame = res::LoadGraph("res/UI/StageSelect/ui_stageframe_02.png");
	_ui->Add(new UISlide(-800, 0, 0, 0, 20), nullptr, cgLeftFrame, -800, 0, 800, 1080, LOW_LAYER_VALUE, "leftFrame");
	_ui->Add(new UISlide(1920, 0, 800, 0, 20), nullptr, cgRightFrame, 1920, 0, 1120, 1080, LOW_LAYER_VALUE, "rightFrame");

	// タグ
	int cgSystemTag, cgStage1Tag, cgStage2Tag, cgStage3Tag;
	cgSystemTag = res::LoadGraph("res/UI/StageSelect/ui_stageselection_01.png");
	cgStage1Tag = res::LoadGraph("res/UI/StageSelect/ui_stagetag_01.png");
	cgStage2Tag = res::LoadGraph("res/UI/StageSelect/ui_stagetag_02.png");
	cgStage3Tag = res::LoadGraph("res/UI/StageSelect/ui_stagetag_03.png");
	_ui->Add(new UISlide(-800, 5, 0, 5, 20), nullptr, cgSystemTag, -800, 5, 650, 120, BASIC_LAYER_VALUE, "systemTag");
	_ui->Add(new UISlide(2592, 64, 1472, 64, 20), nullptr, cgStage1Tag, 2592, 64, 450, 120, BASIC_LAYER_VALUE, "tagStage1");
	_ui->Add(new UISlide(2592, 64, 1472, 64, 20), nullptr, cgStage2Tag, 2592, 64, 450, 120, BASIC_LAYER_VALUE, "tagStage2");
	_ui->Add(new UISlide(2592, 64, 1472, 64, 20), nullptr, cgStage3Tag, 2592, 64, 450, 120, BASIC_LAYER_VALUE, "tagStage3");
	_ui->Search("tagStage2")->_bView = false;
	_ui->Search("tagStage3")->_bView = false;

	// ステージセレクト 
	int cgStage01, cgStage02, cgStage03, cgToTitle, cgGet;
	cgStage01 = res::LoadGraph("res/UI/StageSelect/stage01/ui_stage01.png");
	cgStage02 = res::LoadGraph("res/UI/StageSelect/stage02/ui_stage02.png");
	cgStage03 = res::LoadGraph("res/UI/StageSelect/stage03/ui_stage03.png");
	cgToTitle = res::LoadGraph("res/UI/StageSelect/ui_totitle_01.png");
	cgGet	  = res::LoadGraph("res/UI/StageSelect/ui_targetframe_01.png");
	_ui->Add(new UISlide(-770, 192, 30, 192, 20), nullptr, cgStage01, -770, 192, 600, 100, BASIC_LAYER_VALUE, "stage1");
	_ui->Add(new UISlide(-770, 320, 30, 320, 20), nullptr, cgStage02, -770, 320, 600, 100, BASIC_LAYER_VALUE, "stage2");
	_ui->Add(new UISlide(-770, 448, 30, 448, 20), nullptr, cgStage03, -770, 448, 600, 100, BASIC_LAYER_VALUE, "stage3");
	_ui->Add(new UISlide(-770, 925, 30, 925, 20), nullptr, cgToTitle, -770, 925, 512, 100, BASIC_LAYER_VALUE, "toTitle");
	_ui->Add(new UISlide(-770, 192, 30, 192, 20), nullptr, cgGet,	  -770, 192, 10,  110, HIGH_LAYER_VALUE,  "Get");

}

bool ModeSelect::SwitchTagWithBg(std::string selecting) {
	if (selecting == "toTitle") { return false; }

	std::vector<std::string> tags = { "tagStage1", "tagStage2", "tagStage3" };
	std::vector<std::string> backgrounds = { "bgStage1", "bgStage2", "bgStage3" };

	
	for (const auto& tag : tags) {
		_ui->Search(tag)->_bView = false;
	}
	for (const auto& bg : backgrounds) {
		_ui->Search(bg)->_bView = false;
	}

	int index = std::stoi(selecting.substr(5)) - 1;
	if (index >= 0 && index < tags.size()) {
		_ui->Search(tags[index])->_bView = true;
		_ui->Search(backgrounds[index])->_bView = true;
	}

	return true;
}

bool ModeSelect::AdjustItemPos(std::string selecting) {
	if(selecting == "toTitle") { return false; }

	float stage1Y = _ui->Search("stage1")->_y;
	float stage2Y = _ui->Search("stage2")->_y;
	float stage3Y = _ui->Search("stage3")->_y;

	if (_ui->Search(selecting) == _ui->Search("stage1")) {
		stage2Y += 5;
		stage3Y += 5;
	}
	else if (_ui->Search(selecting) == _ui->Search("stage2")) {
		stage1Y -= 5;
		stage3Y += 5;
	}
	else if (_ui->Search(selecting) == _ui->Search("stage3")) {
		stage1Y -= 5;
		stage2Y -= 5;
	}

	_ui->Search("stage1")->_y = stage1Y;
	_ui->Search("stage2")->_y = stage2Y;
	_ui->Search("stage3")->_y = stage3Y;

	return true;
}
